import SwiftUI
import Shared

/**
 Main theme
 */
struct Main: ThemeProtocol {
	var displayLarge: Font = Font(resource: \.gilda_display_regular, withSize: 57)
	var displayMedium: Font = Font(resource: \.gilda_display_regular, withSize: 45)
	var displaySmall: Font = Font(resource: \.gilda_display_regular, withSize: 36)
	var headlineLarge: Font = Font(resource: \.gilda_display_regular, withSize: 32)
	var headlineMedium: Font = Font(resource: \.gilda_display_regular, withSize: 28)
	var headlineSmall: Font = Font(resource: \.gilda_display_regular, withSize: 24)
	var titleLarge: Font = Font(resource: \.gilda_display_regular, withSize: 22)
	var titleMedium: Font = Font(resource: \.gilda_display_regular, withSize: 16).weight(.medium)
	var titleSmall: Font = Font(resource: \.gilda_display_regular, withSize: 14).weight(.medium)
	var bodyLarge: Font = .system(size: 16)
	var bodyMedium: Font = .system(size: 14)
	var bodySmall: Font = .system(size: 12)
	var labelLarge: Font = .system(size: 14, weight: .medium)
	var labelMedium: Font = .system(size: 12, weight: .medium)
	var labelSmall: Font = .system(size: 11, weight: .medium)

	var primary: Color = .init(uiColor: MR.colors().primary.getUIColor())
	var onPrimary: Color = .init(uiColor: MR.colors().onPrimary.getUIColor())
	var primaryContainer: Color = .init(uiColor: MR.colors().primaryContainer.getUIColor())
	var onPrimaryContainer: Color = .init(uiColor: MR.colors().onPrimaryContainer.getUIColor())
	var secondary: Color = .init(uiColor: MR.colors().secondary.getUIColor())
	var onSecondary: Color = .init(uiColor: MR.colors().onSecondary.getUIColor())
	var secondaryContainer: Color = .init(uiColor: MR.colors().secondaryContainer.getUIColor())
	var onSecondaryContainer: Color = .init(uiColor: MR.colors().onSecondaryContainer.getUIColor())
	var tertiary: Color = .init(uiColor: MR.colors().tertiary.getUIColor())
	var onTertiary: Color = .init(uiColor: MR.colors().onTertiary.getUIColor())
	var tertiaryContainer: Color = .init(uiColor: MR.colors().tertiaryContainer.getUIColor())
	var onTertiaryContainer: Color = .init(uiColor: MR.colors().onTertiaryContainer.getUIColor())
	var error: Color = .init(uiColor: MR.colors().error.getUIColor())
	var onError: Color = .init(uiColor: MR.colors().onError.getUIColor())
	var errorContainer: Color = .init(uiColor: MR.colors().errorContainer.getUIColor())
	var onErrorContainer: Color = .init(uiColor: MR.colors().onErrorContainer.getUIColor())
	var background: Color = .init(uiColor: MR.colors().background.getUIColor())
	var onBackground: Color = .init(uiColor: MR.colors().onBackground.getUIColor())
	var surface: Color = .init(uiColor: MR.colors().surface.getUIColor())
	var onSurface: Color = .init(uiColor: MR.colors().onSurface.getUIColor())
	var surfaceVariant: Color = .init(uiColor: MR.colors().surfaceVariant.getUIColor())
	var onSurfaceVariant: Color = .init(uiColor: MR.colors().onSurfaceVariant.getUIColor())
	var outline: Color = .init(uiColor: MR.colors().outline.getUIColor())
	var outlineVariant: Color = .init(uiColor: MR.colors().outlineVariant.getUIColor())
	var scrim: Color = .init(uiColor: MR.colors().scrim.getUIColor())
	var inverseSurface: Color = .init(uiColor: MR.colors().inverseSurface.getUIColor())
	var inverseOnSurface: Color = .init(uiColor: MR.colors().inverseOnSurface.getUIColor())
	var inversePrimary: Color = .init(uiColor: MR.colors().inversePrimary.getUIColor())
	var surfaceDim: Color = .init(uiColor: MR.colors().surfaceDim.getUIColor())
	var surfaceBright: Color = .init(uiColor: MR.colors().surfaceBright.getUIColor())
	var surfaceContainerLowest: Color = .init(uiColor: MR.colors().surfaceContainerLowest.getUIColor())
	var surfaceContainerLow: Color = .init(uiColor: MR.colors().surfaceContainerLow.getUIColor())
	var surfaceContainer: Color = .init(uiColor: MR.colors().surfaceContainer.getUIColor())
	var surfaceContainerHigh: Color = .init(uiColor: MR.colors().surfaceContainerHigh.getUIColor())
	var surfaceContainerHighest: Color = .init(uiColor: MR.colors().surfaceContainerHighest.getUIColor())
}
